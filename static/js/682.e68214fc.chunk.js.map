{"version":3,"file":"static/js/682.e68214fc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/userFolder/AuthForm/auth-form.module.scss?4595","webpack://react-homework-template/./src/components/headerFolder/Nav/GoogleNav/google-nav.module.scss?2037","components/headerFolder/Nav/GoogleNav/GoogleNav.jsx","components/userFolder/AuthForm/AuthForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button__primary_not_main\":\"auth-form_button__primary_not_main__8P-fg\",\"button__primary_main\":\"auth-form_button__primary_main__MnTkE\",\"button__secondary\":\"auth-form_button__secondary__KPh8C\",\"button__secondary_active\":\"auth-form_button__secondary_active__NYsjk\",\"button__learn\":\"auth-form_button__learn__aF1Az\",\"form__input_container\":\"auth-form_form__input_container__aA0wO\",\"form__label\":\"auth-form_form__label__kvu1f\",\"form__input\":\"auth-form_form__input__PCyqB\",\"form__input_phone\":\"auth-form_form__input_phone__3+Prq\",\"form__input_number\":\"auth-form_form__input_number__ad5x5\",\"form__input__password_show\":\"auth-form_form__input__password_show__m0iHa\",\"error__mesage\":\"auth-form_error__mesage__60rvQ\",\"form__login__input\":\"auth-form_form__login__input__goTNO\",\"coordination__box\":\"auth-form_coordination__box__IaRI-\",\"coordination__box_input\":\"auth-form_coordination__box_input__45QT5\",\"coordination__box_title\":\"auth-form_coordination__box_title__Ub9P3\",\"coordination__box_link\":\"auth-form_coordination__box_link__4TUNL\",\"form__button\":\"auth-form_form__button__-DMkC\",\"form__back_button\":\"auth-form_form__back_button__g2+wq\",\"form__description\":\"auth-form_form__description__SN4bk\",\"form__description_reset\":\"auth-form_form__description_reset__eFgSI\",\"form__description_recover\":\"auth-form_form__description_recover__H2YZU\",\"description__nav\":\"auth-form_description__nav__UAxeo\",\"loading__modal\":\"auth-form_loading__modal__j9v7f\"};","// extracted by mini-css-extract-plugin\nexport default {\"googleBox\":\"google-nav_googleBox__pLbWW\",\"googleBox__title\":\"google-nav_googleBox__title__fq7Z0\",\"linkBox\":\"google-nav_linkBox__Z0cDd\",\"googleDecs\":\"google-nav_googleDecs__GGIZo\",\"googleLink\":\"google-nav_googleLink__A-F5w\"};","import SvgInsert from '../../../utilsFolder/Svg/Svg'\nimport scss from './google-nav.module.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setMenuActive } from 'redux/slices/menuSlice'\n\nconst { REACT_APP_BASE_URL } = process.env\n\nconst GoogleAuth = () => {\n    const isActive = useSelector(state => state.menu.menuActive)\n    const dispatch = useDispatch()\n\n    return (\n        <div className={scss.googleBox}>\n            <div className={scss.googleBox__title}>\n            <p className={scss.googleDecs}>Or sign in with</p>\n            </div>\n            <div className={scss.linkBox}>\n            {isActive === true ? (\n                <>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"icon-google\" />\n                    </a>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"facebook\" />\n                    </a>\n                </>\n            ) : (\n                <>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                        className={scss.googleLink}\n                    >\n                        <SvgInsert id=\"icon-google\" />\n                    </a>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"facebook\" />\n                    </a>\n                </>\n            )}\n            </div>\n        </div>\n    )\n}\n\nexport default GoogleAuth\n","import scss from './auth-form.module.scss'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport operations from '../../../redux/operations/userOperations'\nimport GoogleAuth from '../../headerFolder/Nav/GoogleNav/GoogleNav'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport Loader from 'components/utilsFolder/Loader/Loader'\nimport * as Yup from 'yup'\nimport { useEffect, useState } from 'react'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport { NavLink, useLocation, useParams } from 'react-router-dom'\nimport SvgInsert from 'components/utilsFolder/Svg/Svg'\nimport cities from '../../../helpers/ua.json'\n\nconst schemasForStepFirst = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .min(10, 'The minimum number of characters in the field is 10.')\n        .max(63, 'The maximum number of characters in the field is 63.'),\n    password: Yup.string().required().min(7).max(32),\n    passwordConfirm: Yup.string().required(),\n})\n\nfunction validatePassword(value) {\n    let error\n    if (!value) {\n        error = 'Password is required'\n    } else if (value.includes(' ')) {\n        error = 'Invalid password, must not include spaces'\n    }\n    return error\n}\n\nfunction validateEmail(value) {\n    let error\n    if (!value) {\n        error = 'E-mail address required'\n    } else if (\n        !/^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/i.test(\n            value\n        )\n    ) {\n        error =\n            'The e-mail address is not correct, there must be at least 2 characters before the \"@\" symbol, the hyphen cannot be at the beginning, and the e-mail cannot contain Latin letters'\n    }\n    return error\n}\n\nconst schemasForStepSecond = Yup.object().shape({\n    name: Yup.string().required('Name is required!'),\n    region: Yup.string().required('Region is required!'),\n    number: Yup.string()\n        .matches(\n            /[0-9]/,\n            'Field must contain only numbers, format +380xxxxxxxxx!'\n        )\n        .required('Phone number is required!')\n        .min(9, 'Cannot be less than nine characters!')\n        .max(9, 'Cannot be more than nine characters!'),\n})\n\nconst schemasForLogin = Yup.object().shape({\n    email: Yup.string().email().required().min(10).max(63),\n    password: Yup.string().required().min(7).max(32),\n})\n\nconst AuthForm = () => {\n    const [stepOne, setStepOne] = useState(true)\n    const [onShowPassword, setOnShowPassword] = useState(false)\n    const [onShowConfirmPassword, setOnShowConfirmPassword] = useState(false)\n    const [coordination, setCoordination] = useState(false)\n    const [valuePassword, setValuePassword] = useState('')\n    const [valueConfirmPassword, setValueConfirmPassword] = useState('')\n    const [tokenForResetPassword, setTokenForResetPassword] = useState('')\n    const location = useLocation()\n    const page = location.pathname\n    const { token } = useParams()\n\n    useEffect(()=>{\n        if(page !== '/register' && page !== '/login' && page !== '/verify' && page !== '/reset-password'){\n            setTokenForResetPassword(token)\n        }\n    },[page, token])\n\n    const handleChangePassword = e => {\n        switch (e.target.name) {\n            case 'password':\n                setValuePassword(e.target.value)\n                break\n            case 'passwordConfirm':\n                setValueConfirmPassword(e.target.value)\n                break\n            case 'coordination':\n                setCoordination(e.target.checked)\n                break\n            default:\n                return\n        }\n    }\n\n    // let user = useSelector(state => state.auth.user);\n    // console.log(user);\n    const loading = useSelector(state => state.auth.loading)\n    const dispatch = useDispatch()\n\n    const onLogin = data => {\n        dispatch(operations.login(data))\n    }\n\n    const initialValue = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        name: '',\n        region: '',\n        number: '',\n    }\n\n    const handleSubmitForRegister = (values, actions) => {\n        if (stepOne) {\n            if (values.password !== values.passwordConfirm) {\n                return Notify.failure(\n                    'Your passwords must have the same value!',\n                    {\n                        timeout: 6000,\n                        distance: '100px',\n                        opacity: '0.8',\n                        useIcon: false,\n                        fontSize: '18px',\n                        borderRadius: '20px',\n                        showOnlyTheLastOne: true\n                    }\n                )\n            }\n            return setStepOne(false)\n        }\n        if (!stepOne) {\n            if (\n                !cities.find(\n                    city => `${city.city}, ${city.admin_name}` === values.region\n                )\n            ) {\n                console.log('not')\n                return Notify.failure('Please select a region from the list!', {\n                    timeout: 6000,\n                    distance: '100px',\n                    opacity: '0.8',\n                    useIcon: false,\n                    fontSize: '18px',\n                    borderRadius: '20px',\n                    showOnlyTheLastOne: true\n                })\n            }\n\n            const user = {\n                email: values.email,\n                password: values.password,\n                name: values.name,\n                city: values.region,\n                phone: `380${values.number}`,\n            }\n            actions.resetForm()\n            setStepOne(true)\n            console.log(user)\n            return dispatch(operations.registerNewUser(user))\n        }\n    }\n\n    const handleSubmitForLogin = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return onLogin(user)\n    }\n\n    const backButtonClick = () => {\n        if (!stepOne) {\n            return setStepOne(true)\n        }\n    }\n\n    const showPassword = () => {\n        return setOnShowPassword(!onShowPassword)\n    }\n    const showConfirmPassword = () => {\n        return setOnShowConfirmPassword(!onShowConfirmPassword)\n    }\n\n    const btnAuthVerify = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return dispatch(operations.authVerify(user))\n    }\n\n    const resetPassword = (values, actions) => {\n        const userEmail = {\n            email: values.email,\n        }\n        actions.resetForm()\n        return dispatch(operations.resetUserPassword(userEmail))\n    }\n\n    const handleSubmitForChangePassword = (values, actions) => {\n        if (values.password !== values.passwordConfirm) {\n            console.log(values.password)\n            console.log(values.passwordConfirm)\n            return Notify.failure('Your passwords must have the same value!', {\n                timeout: 6000,\n                distance: '100px',\n                opacity: '0.8',\n                useIcon: false,\n                fontSize: '18px',\n                borderRadius: '20px',\n                showOnlyTheLastOne: true\n            })\n        }\n        const infoForUpdatePassword = {\n            userToken: tokenForResetPassword,\n            userNewPassword: {\n                password: values.password,\n            }\n        }\n        console.log(infoForUpdatePassword)\n        actions.resetForm()\n        setValuePassword('')\n        setValueConfirmPassword('')\n        setTokenForResetPassword('')\n        return dispatch(operations.refreshPassword(infoForUpdatePassword))\n    }\n\n    return (\n        <>\n            {loading && <Loader />}\n            {page === '/register' && (\n                <>\n                    {stepOne ? (\n                        <Formik\n                            validationSchema={schemasForStepFirst}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                        >\n                            <Form\n                                className={scss.form__container}\n                                autoComplete=\"off\"\n                                onChange={handleChangePassword}\n                            >\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"email\"\n                                        name=\"email\"\n                                        validate={validateEmail}\n                                        placeholder=\" \"\n                                    />\n                                    <label className={scss.form__label}>\n                                        Email\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"email\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"password\"\n                                        validate={validatePassword}\n                                        placeholder=\" \"\n                                        //onChange={handleChangePassword}\n                                    />\n                                    <label className={scss.form__label}>\n                                        Password\n                                    </label>\n                                    {valuePassword.length >= 1 && (\n                                        <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showPassword}\n                                        >\n                                            {!onShowPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                    )}\n                                    <ErrorMessage\n                                        name=\"password\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowConfirmPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"passwordConfirm\"\n                                        placeholder=\" \"\n                                        validate={validatePassword}\n                                    />\n                                    <label className={scss.form__label}>\n                                        Confirm Password\n                                    </label>\n                                    {valueConfirmPassword.length >= 1 && (\n                                        <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showConfirmPassword}\n                                        >\n                                            {!onShowConfirmPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                    )}\n                                    <ErrorMessage\n                                        name=\"passwordConfirm\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.coordination__box}>\n                                    <Field\n                                        className={scss.coordination__box_input}\n                                        type=\"checkbox\"\n                                        name=\"coordination\"\n                                    />\n                                    <label\n                                        className={scss.coordination__box_title}\n                                    >\n                                        Погоджуюсь з{' '}\n                                        <a\n                                            href=\"https://www.google.com.ua/\"\n                                            className={\n                                                scss.coordination__box_link\n                                            }\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            правилами користування сайту\n                                        </a>\n                                    </label>\n                                </div>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                    disabled={!coordination}\n                                >\n                                    Next\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    ) : (\n                        <Formik\n                            validationSchema={schemasForStepSecond}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                            autoComplete=\"off\"\n                        >\n                            <Form className={scss.form__container}>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"text\"\n                                        name=\"name\"\n                                        placeholder=\" \"\n                                        required\n                                    />\n                                    <label className={scss.form__label}>\n                                        Name\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"name\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        name=\"region\"\n                                        list=\"region\"\n                                        type=\"text\"\n                                        placeholder=\" \"\n                                    />\n                                    <datalist id=\"region\">\n                                        {cities.map(city => (\n                                            <option\n                                                key={`${city.city}.${city.lat}`}\n                                            >\n                                                {city.city}, {city.admin_name}\n                                            </option>\n                                        ))}\n                                    </datalist>\n                                    <label className={scss.form__label}>\n                                        City, region\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"region\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={`${scss.form__input} ${scss.form__input_phone}`}\n                                        type=\"tel\"\n                                        name=\"number\"\n                                        placeholder=\" \"\n                                    />\n                                    <span className={scss.form__input_number}>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"25\"\n                                            height=\"20\"\n                                        >\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                fill=\"#005BBB\"\n                                            />\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                y=\"10\"\n                                                fill=\"#FFD500\"\n                                            />\n                                        </svg>\n                                        <p>+380</p>\n                                    </span>\n                                    <label className={scss.form__label}>\n                                        Mobile phone\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"number\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <span\n                                    className={`${scss.button__primary_not_main} ${scss.form__back_button}`}\n                                    onClick={backButtonClick}\n                                >\n                                    &#5130; Go back\n                                </span>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                >\n                                    Register\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    )}\n                    <p className={scss.form__description}>\n                        Already have an account?{' '}\n                        <NavLink className={scss.description__nav} to=\"/login\">\n                            Login\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/login' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={handleSubmitForLogin}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                />\n                                <label className={scss.form__label}>\n                                    Email\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={`${scss.form__input} ${scss.form__login__input}`}\n                                    type={!onShowPassword ? 'password' : 'text'}\n                                    name=\"password\"\n                                    placeholder=\" \"\n                                    validate={validatePassword}\n                                />\n                                <label className={scss.form__label}>\n                                    Password\n                                </label>\n                                {valuePassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showPassword}\n                                    >\n                                        {!onShowPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"password\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                Login\n                            </button>\n                            <p className={scss.form__description}>\n                                Resend verification email? Click{' '}\n                                <NavLink\n                                    to=\"/verify\"\n                                    className={scss.description__nav}\n                                >\n                                    here\n                                </NavLink>\n                            </p>\n                            <p\n                                className={`${scss.form__description} ${scss.form__description_reset}`}\n                            >\n                                Forgot your password? Click{' '}\n                                <NavLink\n                                    to=\"/reset-password\"\n                                    className={scss.description__nav}\n                                >\n                                    here\n                                </NavLink>\n                            </p>\n                            <GoogleAuth />\n                        </Form>\n                    </Formik>\n                    <p className={scss.form__description}>\n                        Don't have an account?{' '}\n                        <NavLink\n                            to=\"/register\"\n                            className={scss.description__nav}\n                        >\n                            Register\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/verify' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={btnAuthVerify}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                />\n                                <label className={scss.form__label}>\n                                    Email\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={`${scss.form__input} ${scss.form__login__input}`}\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\" \"\n                                    validate={validatePassword}\n                                />\n                                <label className={scss.form__label}>\n                                    Password\n                                </label>\n                                {valuePassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showPassword}\n                                    >\n                                        {!onShowPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"password\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                Verify\n                            </button>\n                        </Form>\n                    </Formik>\n\n                    <p className={scss.form__description}>\n                        Go to back?{' '}\n                        <NavLink to=\"/login\" className={scss.description__nav}>\n                            Login\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/reset-password' && (\n                <>\n                    <Formik\n                        initialValues={initialValue}\n                        onSubmit={resetPassword}\n                    >\n                        <Form className={scss.form__container}>\n                            <p className={scss.form__description_recover}>\n                                Please, enter your email to reset password:\n                            </p>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                    validate={validateEmail}\n                                />\n                                <label className={scss.form__label}>\n                                    Email\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                Reset Password\n                            </button>\n                        </Form>\n                    </Formik>\n\n                    <p className={scss.form__description}>\n                        Go to back?{' '}\n                        <NavLink to=\"/login\" className={scss.description__nav}>\n                            Login\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page !== '/register' && page !== '/login' && page !== '/verify' && page !== '/reset-password' && (\n                <Formik\n                    validationSchema={schemasForStepFirst}\n                    initialValues={initialValue}\n                    onSubmit={handleSubmitForChangePassword}\n                >\n                    <Form\n                        className={scss.form__container}\n                        autoComplete=\"off\"\n                        onChange={handleChangePassword}\n                    >\n                        <div className={scss.form__input_container}>\n                            <Field\n                                className={scss.form__input}\n                                type={!onShowPassword ? 'password' : 'text'}\n                                name=\"password\"\n                                validate={validatePassword}\n                                placeholder=\" \"\n                                //onChange={handleChangePassword}\n                            />\n                            <label className={scss.form__label}>Password</label>\n                            {valuePassword.length >= 1 && (\n                                <span\n                                    className={scss.form__input__password_show}\n                                    onClick={showPassword}\n                                >\n                                    {!onShowPassword ? (\n                                        <SvgInsert id=\"eye\" />\n                                    ) : (\n                                        <SvgInsert id=\"eye-blocked\" />\n                                    )}\n                                </span>\n                            )}\n                            <ErrorMessage\n                                name=\"password\"\n                                render={msg => (\n                                    <p className={scss.error__mesage}>{msg}</p>\n                                )}\n                            />\n                        </div>\n                        <div className={scss.form__input_container}>\n                            <Field\n                                className={scss.form__input}\n                                type={\n                                    !onShowConfirmPassword ? 'password' : 'text'\n                                }\n                                name=\"passwordConfirm\"\n                                placeholder=\" \"\n                                validate={validatePassword}\n                            />\n                            <label className={scss.form__label}>\n                                Confirm Password\n                            </label>\n                            {valueConfirmPassword.length >= 1 && (\n                                <span\n                                    className={scss.form__input__password_show}\n                                    onClick={showConfirmPassword}\n                                >\n                                    {!onShowConfirmPassword ? (\n                                        <SvgInsert id=\"eye\" />\n                                    ) : (\n                                        <SvgInsert id=\"eye-blocked\" />\n                                    )}\n                                </span>\n                            )}\n                            <ErrorMessage\n                                name=\"passwordConfirm\"\n                                render={msg => (\n                                    <p className={scss.error__mesage}>{msg}</p>\n                                )}\n                            />\n                        </div>\n                        <button\n                            className={`${scss.button__primary_main} ${scss.form__button}`}\n                            type=\"submit\"\n                        >\n                            Change password\n                        </button>\n                    </Form>\n                </Formik>\n            )}\n        </>\n    )\n}\n\nexport default AuthForm\n"],"names":["REACT_APP_BASE_URL","process","isActive","useSelector","state","menu","menuActive","dispatch","useDispatch","className","scss","href","onClick","setMenuActive","Svg","id","schemasForStepFirst","Yup","shape","email","min","max","password","required","passwordConfirm","validatePassword","value","error","includes","validateEmail","test","schemasForStepSecond","name","region","number","matches","schemasForLogin","useState","stepOne","setStepOne","onShowPassword","setOnShowPassword","onShowConfirmPassword","setOnShowConfirmPassword","coordination","setCoordination","valuePassword","setValuePassword","valueConfirmPassword","setValueConfirmPassword","tokenForResetPassword","setTokenForResetPassword","page","useLocation","pathname","token","useParams","useEffect","handleChangePassword","e","target","checked","loading","auth","initialValue","handleSubmitForRegister","values","actions","Notify","timeout","distance","opacity","useIcon","fontSize","borderRadius","showOnlyTheLastOne","cities","city","admin_name","console","log","user","phone","resetForm","operations","showPassword","showConfirmPassword","Loader","validationSchema","initialValues","onSubmit","autoComplete","onChange","type","validate","placeholder","render","msg","length","rel","disabled","list","lat","xmlns","width","height","fill","y","to","data","userEmail","infoForUpdatePassword","userToken","userNewPassword"],"sourceRoot":""}