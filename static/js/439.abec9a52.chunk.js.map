{"version":3,"file":"static/js/439.abec9a52.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/userFolder/AuthForm/auth-form.module.scss?4595","webpack://react-homework-template/./src/components/headerFolder/Nav/GoogleNav/google-nav.module.scss?2037","components/headerFolder/Nav/GoogleNav/GoogleNav.jsx","components/userFolder/AuthForm/AuthForm.jsx","webpack://react-homework-template/./src/components/utilsFolder/Loader/loader.module.scss?53e8","components/utilsFolder/Loader/Loader.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button__primary_not_main\":\"auth-form_button__primary_not_main__8P-fg\",\"button__primary_main\":\"auth-form_button__primary_main__MnTkE\",\"button__secondary\":\"auth-form_button__secondary__KPh8C\",\"button__secondary_active\":\"auth-form_button__secondary_active__NYsjk\",\"button__learn\":\"auth-form_button__learn__aF1Az\",\"form__input_container\":\"auth-form_form__input_container__aA0wO\",\"form__label\":\"auth-form_form__label__kvu1f\",\"form__input\":\"auth-form_form__input__PCyqB\",\"form__input_phone\":\"auth-form_form__input_phone__3+Prq\",\"form__input_number\":\"auth-form_form__input_number__ad5x5\",\"form__input__password_show\":\"auth-form_form__input__password_show__m0iHa\",\"error__mesage\":\"auth-form_error__mesage__60rvQ\",\"form__login__input\":\"auth-form_form__login__input__goTNO\",\"form__button\":\"auth-form_form__button__-DMkC\",\"form__back_button\":\"auth-form_form__back_button__g2+wq\",\"form__description\":\"auth-form_form__description__SN4bk\",\"description__nav\":\"auth-form_description__nav__UAxeo\",\"loading__modal\":\"auth-form_loading__modal__j9v7f\"};","// extracted by mini-css-extract-plugin\nexport default {\"googleBox\":\"google-nav_googleBox__pLbWW\",\"googleBox__title\":\"google-nav_googleBox__title__fq7Z0\",\"linkBox\":\"google-nav_linkBox__Z0cDd\",\"googleDecs\":\"google-nav_googleDecs__GGIZo\",\"googleLink\":\"google-nav_googleLink__A-F5w\"};","import SvgInsert from '../../../utilsFolder/Svg/Svg'\nimport scss from './google-nav.module.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setMenuActive } from 'redux/slices/menuSlice'\n\nconst { REACT_APP_BASE_URL } = process.env\n\nconst GoogleAuth = () => {\n    const isActive = useSelector(state => state.menu.menuActive)\n    const dispatch = useDispatch()\n\n    return (\n        <div className={scss.googleBox}>\n            <div className={scss.googleBox__title}>\n            <p className={scss.googleDecs}>Or sign in with</p>\n            </div>\n            <div className={scss.linkBox}>\n            {isActive === true ? (\n                <>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"icon-google\" />\n                    </a>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"facebook\" />\n                    </a>\n                </>\n            ) : (\n                <>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                        className={scss.googleLink}\n                    >\n                        <SvgInsert id=\"icon-google\" />\n                    </a>\n                    <a\n                        href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                        className={scss.googleLink}\n                        onClick={() => dispatch(setMenuActive(!isActive))}\n                    >\n                        <SvgInsert id=\"facebook\" />\n                    </a>\n                </>\n            )}\n            </div>\n        </div>\n    )\n}\n\nexport default GoogleAuth\n","import scss from './auth-form.module.scss'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport operations from '../../../redux/operations/userOperations'\nimport GoogleAuth from '../../headerFolder/Nav/GoogleNav/GoogleNav'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport Loader from 'components/utilsFolder/Loader/Loader'\nimport * as Yup from 'yup'\nimport { useState } from 'react'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport SvgInsert from 'components/utilsFolder/Svg/Svg'\nimport cities from './ua.json'\n\nconst schemasForStepFirst = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .min(10, 'The minimum number of characters in the field is 10.')\n        .max(63, 'The maximum number of characters in the field is 63.'),\n    password: Yup.string().required().min(7).max(32),\n    passwordConfirm: Yup.string().required(),\n})\n\nfunction validatePassword(value) {\n    let error\n    if (!value) {\n        error = 'Password is required'\n    } else if (value.includes(' ')) {\n        error = 'Invalid password, must not include spaces'\n    }\n    return error\n}\n\nfunction validateEmail(value) {\n    let error\n    if (!value) {\n        error = 'E-mail address required'\n    } else if (\n        !/^((([0-9A-Za-z]{1}[-0-9A-z]{1,}[0-9A-Za-z]{1}))@([-0-9A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/i.test(\n            value\n        )\n    ) {\n        error =\n            'The e-mail address is not correct, there must be at least 2 characters before the \"@\" symbol, the hyphen cannot be at the beginning, and the e-mail cannot contain Latin letters'\n    }\n    return error\n}\n\nconst schemasForStepSecond = Yup.object().shape({\n    name: Yup.string().required('Name is required!'),\n    region: Yup.string().required('Region is required!'),\n    number: Yup.string()\n        .matches(\n            /[0-9]/,\n            'Field must contain only numbers, format +380xxxxxxxxx!'\n        )\n        .required('Phone number is required!')\n        .min(9, 'Cannot be less than nine characters!')\n        .max(9, 'Cannot be more than nine characters!'),\n})\n\nconst schemasForLogin = Yup.object().shape({\n    email: Yup.string().email().required().min(10).max(63),\n    password: Yup.string().required().min(7).max(32),\n})\n\nconst AuthForm = () => {\n    const [stepOne, setStepOne] = useState(true)\n    const [onShowPassword, setOnShowPassword] = useState(false)\n    const [onShowConfirmPassword, setOnShowConfirmPassword] = useState(false)\n    const [valuePassword, setValuePassword] = useState('')\n    const [valueConfirmPassword, setValueConfirmPassword] = useState('')\n    const location = useLocation()\n    const page = location.pathname\n    const handleChangePassword = (e) => {\n        switch(e.target.name){\n            case 'password':\n                setValuePassword(e.target.value);\n                break;\n            case 'passwordConfirm':\n                setValueConfirmPassword(e.target.value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    // let user = useSelector(state => state.auth.user);\n    // console.log(user);\n    const loading = useSelector(state => state.auth.loading)\n    const dispatch = useDispatch()\n\n    const onLogin = data => {\n        dispatch(operations.login(data))\n    }\n\n    const initialValue = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        name: '',\n        region: '',\n        number: '',\n    }\n\n    const handleSubmitForRegister = (values, actions) => {\n        if (stepOne) {\n            if (values.password !== values.passwordConfirm) {\n                return Notify.failure(\n                    'Your passwords must have the same value!',\n                    {\n                        timeout: 6000,\n                    }\n                )\n            }\n            return setStepOne(false)\n        }\n        if (!stepOne) {\n\n            if(!cities.find(city => `${city.city}, ${city.admin_name}` === values.region)){\n                console.log('not')\n                return Notify.failure(\n                    'Please select a region from the list!',\n                    {\n                        timeout: 6000,\n                    }\n                )\n            }\n\n            const user = {\n                email: values.email,\n                password: values.password,\n                name: values.name,\n                city: values.region,\n                phone: `380${values.number}`,\n            }\n            actions.resetForm()\n            setStepOne(true)\n            console.log(user)\n            return dispatch(operations.registerNewUser(user))\n        }\n    }\n\n    const handleSubmitForLogin = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return onLogin(user)\n    }\n\n    const backButtonClick = () => {\n        if (!stepOne) {\n            return setStepOne(true)\n        }\n    }\n\n    const showPassword = () => {\n        return setOnShowPassword(!onShowPassword)\n    }\n    const showConfirmPassword = () => {\n        return setOnShowConfirmPassword(!onShowConfirmPassword)\n    }\n\n    const btnAuthVerify = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return dispatch(operations.authVerify(user))\n    }\n\n    return (\n        <>\n            {loading && <Loader />}\n            {page === '/register' && (\n                <>\n                    {stepOne ? (\n                        <Formik\n                            validationSchema={schemasForStepFirst}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                            \n                        >\n                            <Form\n                                className={scss.form__container}\n                                autoComplete=\"off\"\n                                onChange={handleChangePassword}\n                            >\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"email\"\n                                        name=\"email\"\n                                        validate={validateEmail}\n                                        placeholder=\" \"\n                                    />\n                                    <label className={scss.form__label}>\n                                        Email\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"email\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"password\"\n                                        validate={validatePassword}\n                                        placeholder=\" \"\n                                        //onChange={handleChangePassword}\n                                    />\n                                    <label className={scss.form__label}>\n                                        Password\n                                    </label>\n                                        {valuePassword.length >= 1 &&\n                                            <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showPassword}\n                                        >\n                                            {!onShowPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                        }\n                                    <ErrorMessage\n                                        name=\"password\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowConfirmPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"passwordConfirm\"\n                                        placeholder=\" \"\n                                        validate={validatePassword}\n                                    />\n                                    <label className={scss.form__label}>\n                                        Confirm Password\n                                    </label>\n                                        {\n                                        valueConfirmPassword.length >= 1 &&\n                                        <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showConfirmPassword}\n                                    >\n                                        {!onShowConfirmPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                        }\n                                    <ErrorMessage\n                                        name=\"passwordConfirm\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                >\n                                    Next\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    ) : (\n                        <Formik\n                            validationSchema={schemasForStepSecond}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                            autoComplete=\"off\"\n                        >\n                            <Form className={scss.form__container}>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"text\"\n                                        name=\"name\"\n                                        placeholder=\" \"\n                                        required\n                                    />\n                                    <label className={scss.form__label}>\n                                        Name\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"name\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        name=\"region\"\n                                        list=\"region\"\n                                        type=\"text\"\n                                        placeholder=\" \"\n                                    />\n                                    <datalist id=\"region\">\n                                        {cities.map(city => (\n                                            <option\n                                                key={`${city.city}.${city.lat}`}\n                                            >\n                                                {city.city}, {city.admin_name}\n                                            </option>\n                                        ))}\n                                    </datalist>\n                                    <label className={scss.form__label}>\n                                        City, region\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"region\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={`${scss.form__input} ${scss.form__input_phone}`}\n                                        type=\"tel\"\n                                        name=\"number\"\n                                        placeholder=\" \"\n                                    />\n                                    <span className={scss.form__input_number}>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"25\"\n                                            height=\"20\"\n                                        >\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                fill=\"#005BBB\"\n                                            />\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                y=\"10\"\n                                                fill=\"#FFD500\"\n                                            />\n                                        </svg>\n                                        <p>+380</p>\n                                    </span>\n                                    <label className={scss.form__label}>\n                                        Mobile phone\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"number\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <span\n                                    className={`${scss.button__primary_not_main} ${scss.form__back_button}`}\n                                    onClick={backButtonClick}\n                                >\n                                    &#5130; Go back\n                                </span>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                >\n                                    Register\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    )}\n                    <p className={scss.form__description}>\n                        Already have an account?{' '}\n                        <NavLink className={scss.description__nav} to=\"/login\">\n                            Login\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/login' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={handleSubmitForLogin}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                            <Field\n                                className={scss.form__input}\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\" \"\n                            />\n                            <label className={scss.form__label}>Email</label>\n                            <ErrorMessage\n                                name=\"email\"\n                                render={msg => <p className={scss.error__mesage}>\n                                {msg}\n                            </p>}\n                            />\n                            </div>\n                            <div className={scss.form__input_container}>\n                            <Field\n                                className={`${scss.form__input} ${scss.form__login__input}`}\n                                type={\n                                    !onShowPassword\n                                        ? 'password'\n                                        : 'text'\n                                }\n                                name=\"password\"\n                                placeholder=\" \"\n                                validate={validatePassword}\n                            />\n                            <label className={scss.form__label}>Password</label>\n                            {valuePassword.length >= 1 &&\n                                            <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showPassword}\n                                        >\n                                            {!onShowPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                        }\n                            <ErrorMessage\n                                name=\"password\"\n                                render={msg => <p className={scss.error__mesage}>\n                                {msg}\n                            </p>}\n                            />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                Login\n                            </button>\n                            <p className={scss.form__description}>\n                                Resend verification email? Click{' '}\n                                <NavLink\n                                    to=\"/verify\"\n                                    className={scss.description__nav}\n                                >\n                                    here\n                                </NavLink>\n                            </p>\n                            <GoogleAuth />\n                        </Form>\n                    </Formik>\n                    <p className={scss.form__description}>\n                        Don't have an account?{' '}\n                        <NavLink\n                            to=\"/register\"\n                            className={scss.description__nav}\n                        >\n                            Register\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/verify' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={btnAuthVerify}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                            <Field\n                                className={scss.form__input}\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\" \"\n                            />\n                            <label className={scss.form__label}>Email</label>\n                            <ErrorMessage\n                                name=\"email\"\n                                render={msg => <p className={scss.error__mesage}>\n                                {msg}\n                            </p>}\n                            />\n                            </div>\n                            <div className={scss.form__input_container}>\n                            <Field\n                                className={`${scss.form__input} ${scss.form__login__input}`}\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\" \"\n                                validate={validatePassword}\n                            />\n                            <label className={scss.form__label}>Password</label>\n                            {valuePassword.length >= 1 &&\n                                            <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showPassword}\n                                        >\n                                            {!onShowPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                        }\n                            <ErrorMessage\n                                name=\"password\"\n                                render={msg => <p className={scss.error__mesage}>\n                                {msg}\n                            </p>}\n                            />\n                            </div>\n\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                Verify\n                            </button>\n                        </Form>\n                    </Formik>\n\n                    <p className={scss.form__description}>\n                        Go to back?{' '}\n                        <NavLink to=\"/login\" className={scss.description__nav}>\n                            Login\n                        </NavLink>\n                    </p>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default AuthForm\n","// extracted by mini-css-extract-plugin\nexport default {\"loading__modal\":\"loader_loading__modal__8AohZ\"};","import scss from './loader.module.scss';\n\nimport { Hearts } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={scss.loading__modal}>\n      <Hearts\n        height=\"100\"\n        width=\"100\"\n        color=\"#F59256\"\n        ariaLabel=\"hearts-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n"],"names":["REACT_APP_BASE_URL","process","isActive","useSelector","state","menu","menuActive","dispatch","useDispatch","className","scss","href","onClick","setMenuActive","Svg","id","schemasForStepFirst","Yup","shape","email","min","max","password","required","passwordConfirm","validatePassword","value","error","includes","validateEmail","test","schemasForStepSecond","name","region","number","matches","schemasForLogin","useState","stepOne","setStepOne","onShowPassword","setOnShowPassword","onShowConfirmPassword","setOnShowConfirmPassword","valuePassword","setValuePassword","valueConfirmPassword","setValueConfirmPassword","page","useLocation","pathname","handleChangePassword","e","target","loading","auth","initialValue","handleSubmitForRegister","values","actions","Notify","timeout","cities","city","admin_name","console","log","user","phone","resetForm","operations","showPassword","Loader","validationSchema","initialValues","onSubmit","autoComplete","onChange","type","validate","placeholder","render","msg","length","list","lat","xmlns","width","height","fill","y","to","data","color","ariaLabel","wrapperStyle","wrapperClass","visible"],"sourceRoot":""}