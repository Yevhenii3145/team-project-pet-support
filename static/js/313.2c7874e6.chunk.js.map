{"version":3,"file":"static/js/313.2c7874e6.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AuthForm/auth-form.module.scss?fa82","webpack://react-homework-template/./src/components/Nav/GoogleNav/google-nav.module.scss?feb6","components/Nav/GoogleNav/GoogleNav.jsx","components/AuthForm/AuthForm.jsx","webpack://react-homework-template/./src/components/Loader/loader.module.scss?4ce9","components/Loader/Loader.jsx","webpack://react-homework-template/./src/pages/VerifyPage/login-page.module.scss?a086","pages/VerifyPage/VerifyPage.jsx","../node_modules/@chakra-ui/spinner/dist/chunk-NO6MRLPK.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button__primary_not_main\":\"auth-form_button__primary_not_main__fGppv\",\"button__primary_main\":\"auth-form_button__primary_main__yR6bd\",\"button__secondary\":\"auth-form_button__secondary__-QKt9\",\"button__secondary_active\":\"auth-form_button__secondary_active__zeaxt\",\"button__learn\":\"auth-form_button__learn__+Ay25\",\"form__input\":\"auth-form_form__input__xxVGj\",\"form__login__input\":\"auth-form_form__login__input__ADKvY\",\"form__button\":\"auth-form_form__button__l5OqE\",\"form__back_button\":\"auth-form_form__back_button__TxFf4\",\"form__description\":\"auth-form_form__description__DOkRQ\",\"description__nav\":\"auth-form_description__nav__gqvQb\",\"loading__modal\":\"auth-form_loading__modal__hvqRP\"};","// extracted by mini-css-extract-plugin\nexport default {\"googleBox\":\"google-nav_googleBox__-bJnf\",\"googleDecs\":\"google-nav_googleDecs__DFZYi\",\"googleLink\":\"google-nav_googleLink__zKBiT\"};","import SvgInsert from \"../../Svg/Svg\";\nimport scss from \"./google-nav.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setMenuActive } from \"redux/menuSlice\";\n\nconst {REACT_APP_BASE_URL} = process.env;\n\nconst GoogleAuth = () => {\n\n    const isActive = useSelector(state=>state.menu.menuActive)\n    const dispatch = useDispatch();\n\n    return (\n        <div className={scss.googleBox}>\n        <p className={scss.googleDecs}>Or sign in with</p>\n        {isActive === true ? <a href={`${REACT_APP_BASE_URL}/api/auth/google`} className={scss.googleLink} onClick={()=>dispatch(setMenuActive(!isActive))}>\n        <SvgInsert id=\"icon-google\"/>\n        <p className={scss.googleDecs}>Google</p>\n        </a>\n        : <a href={`${REACT_APP_BASE_URL}/api/auth/google`} className={scss.googleLink}>\n        <SvgInsert id=\"icon-google\"/>\n        <p className={scss.googleDecs}>Google</p>\n        </a>}\n        </div>\n    )\n}\n\nexport default GoogleAuth;\n","import scss from './auth-form.module.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport operations from '../../redux/operations';\nimport GoogleAuth from \"../Nav/GoogleNav/GoogleNav\"\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Loader from 'components/Loader/Loader';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst schemasForStepFirst = Yup.object().shape({\n  email: Yup.string().email().required().min(10, 'the minimum number of characters in the field is 10').max(63, 'the maximum number of characters in the field is 63 inclusive'),\n  password: Yup.string().required().min(7).max(32),\n  passwordConfirm: Yup.string().required(),\n});\n\nfunction validatePassword(value) {\n  let error;\n  if (!value) {\n    error = 'Password is required';\n  } else if (value.includes(' ')) {\n    error = 'Invalid password, must not include spaces';\n  }\n  return error;\n}\n\nfunction validateEmail(value) {\n  let error;\n  if (!value) {\n    error = 'E-mail address required';\n  } else if (!/^((([0-9A-Za-z]{1}[-0-9A-z]{1,}[0-9A-Za-z]{1}))@([-0-9A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/i.test(value)) {\n    error = 'The e-mail address is not correct, there must be at least 2 characters before the \"@\" symbol, the hyphen cannot be at the beginning, and the e-mail cannot contain Latin letters, email can include Latin letters, numbers and symbols!';\n  }\n  return error;\n}\n\nconst schemasForStepSecond = Yup.object().shape({\n  name: Yup.string().required('Name is required!'),\n  region: Yup.string().matches(\n    /^[aA-zZ]+,/,\n    'Is not correct format, must \"City, Region\"'\n  ).required('Region is required'),\n  number: Yup.string()\n    .matches(/^3?[\\s]?8?[\\s]?\\(?0\\d{2}?\\)?[\\s]?\\d{3}[\\s|-]?\\d{2}[\\s|-]?\\d{2}$/, 'Field must contain only numbers and format 380xxxxxxxxx!')\n    .required('Phone number is required!')\n    .min(12, 'Cannot be less than twelve characters!')\n    .max(12, 'Cannot be more than twelve characters!'),\n});\n\nconst schemasForLogin = Yup.object().shape({\n  email: Yup.string().email().required().min(10).max(63),\n  password: Yup.string().required().min(7).max(32)\n});\n\nconst AuthForm = () => {\n  const [stepOne, setStepOne] = useState(true);\n  const location = useLocation();\n  const page = location.pathname;\n\n  let user = useSelector(state => state.auth.user);\n  const loading = useSelector(state => state.auth.loading);\n  const dispatch = useDispatch();\n\n  const onLogin = (data) => {\n    dispatch(operations.login(data));\n  }\n\n  const initialValue = {\n    email: '',\n    password: '',\n    passwordConfirm: '',\n    name: '',\n    region: '',\n    number: '',\n  };\n\n  const handleSubmitForRegister = (values, actions) => {\n    if (stepOne) {\n      if (values.password !== values.passwordConfirm) {\n        return Notify.failure('Your passwords must have the same value');\n      }\n      return setStepOne(false);\n    }\n    if (!stepOne) {\n      user = {\n        email: values.email,\n        password: values.password,\n        name: values.name,\n        city: values.region,\n        phone: values.number,\n      };\n      actions.resetForm();\n      setStepOne(true);\n      return dispatch(operations.registerNewUser(user));\n    }\n  };\n\n  const handleSubmitForLogin = (values, actions) => {\n    user = {\n      email: values.email,\n      password: values.password,\n    };\n    actions.resetForm();\n    return onLogin(user)\n  };\n\n  const backButtonClick = () => {\n    if (!stepOne) {\n      return setStepOne(true);\n    }\n  };\n\n  const btnAuthVerify = (values, actions) => {\n    user = {\n      email: values.email,\n      password: values.password,\n    };\n    actions.resetForm();\n    return dispatch(operations.authVerify(user));\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      {page === '/register' && (\n        <>\n          {stepOne ? (\n            <Formik\n              validationSchema={schemasForStepFirst}\n              initialValues={initialValue}\n              onSubmit={handleSubmitForRegister}\n            >\n              <Form className={scss.form__container} autoComplete=\"off\">\n                <Field\n                  className={scss.form__input}\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  validate={validateEmail}\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <Field\n                  className={scss.form__input}\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  validate={validatePassword}\n                />\n                <ErrorMessage\n                  name=\"password\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <Field\n                  className={scss.form__input}\n                  type=\"password\"\n                  name=\"passwordConfirm\"\n                  placeholder=\"Confirm Password\"\n                  validate={validatePassword}\n                />\n                <ErrorMessage\n                  name=\"passwordConfirm\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <button\n                  className={`${scss.button__primary_main} ${scss.form__button}`}\n                  type=\"submit\"\n                >\n                  Next\n                </button>\n                <GoogleAuth/>\n              </Form>\n            </Formik>\n          ) : (\n            <Formik\n              validationSchema={schemasForStepSecond}\n              initialValues={initialValue}\n              onSubmit={handleSubmitForRegister}\n              autoComplete=\"off\"\n            >\n              <Form className={scss.form__container}>\n                <Field\n                  className={scss.form__input}\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  required\n                />\n                <ErrorMessage\n                  name=\"name\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <Field\n                  className={scss.form__input}\n                  type=\"text\"\n                  name=\"region\"\n                  placeholder=\"City, region\"\n                  required\n                />\n                <ErrorMessage\n                  name=\"region\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <Field\n                  className={scss.form__input}\n                  type=\"tel\"\n                  name=\"number\"\n                  placeholder=\"Mobile phone\"\n                />\n                <ErrorMessage\n                  name=\"number\"\n                  render={msg => Notify.warning(`${msg}`, {timeout: 6000})}\n                />\n                <span\n                  className={`${scss.button__primary_not_main} ${scss.form__back_button}`}\n                  onClick={backButtonClick}\n                >\n                  &#5130; Go back\n                </span>\n                <button\n                  className={`${scss.button__primary_main} ${scss.form__button}`}\n                  type=\"submit\"\n                >\n                  Register\n                  </button>\n                <GoogleAuth/>\n              </Form>\n            </Formik>\n          )}\n          <p className={scss.form__description}>\n            Already have an account?{' '}\n            <NavLink className={scss.description__nav} to=\"/login\">\n              Login\n            </NavLink>\n          </p>\n        </>\n      )}\n      {page === '/login' && (\n        <>\n          <Formik\n            validationSchema={schemasForLogin}\n            initialValues={initialValue}\n            onSubmit={handleSubmitForLogin}\n          >\n            <Form className={scss.form__container} autoComplete=\"off\">\n              <Field\n                className={scss.form__input}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n              />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => Notify.warning(`${msg}`)}\n              />\n              <Field\n                className={`${scss.form__input} ${scss.form__login__input}`}\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                validate={validatePassword}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => Notify.warning(`${msg}`)}\n              />\n\n              <button\n                className={`${scss.button__primary_main} ${scss.form__button}`}\n                type=\"submit\"\n              >\n                Login\n              </button>\n              <p className={scss.form__description}>\n                Resend verification email? Click {' '}\n                <NavLink to=\"/verify\" className={scss.description__nav}>\n                  here\n                </NavLink>\n              </p>\n              <GoogleAuth/>\n            </Form>\n          </Formik>\n          <p className={scss.form__description}>\n            Don't have an account?{' '}\n            <NavLink to=\"/register\" className={scss.description__nav}>\n              Register\n            </NavLink>\n          </p>\n        </>\n      )}\n      {page === '/verify' && (\n        <>\n          <Formik\n            validationSchema={schemasForLogin}\n            initialValues={initialValue}\n            onSubmit={btnAuthVerify}\n          >\n            <Form className={scss.form__container} autoComplete=\"off\">\n              <Field\n                className={scss.form__input}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n              />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => Notify.warning(`${msg}`)}\n              />\n              <Field\n                className={`${scss.form__input} ${scss.form__login__input}`}\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                validate={validatePassword}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => Notify.warning(`${msg}`)}\n              />\n\n              <button\n                className={`${scss.button__primary_main} ${scss.form__button}`}\n                type=\"submit\"\n              >\n                Verify\n              </button>\n            </Form>\n          </Formik>\n          \n          <p className={scss.form__description}>\n            Go to back?{' '}\n            <NavLink to=\"/login\" className={scss.description__nav}>\n              Login\n            </NavLink>\n          </p>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AuthForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"loading__modal\":\"loader_loading__modal__7RGsW\"};","import scss from './loader.module.scss';\n\nimport { Hearts } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={scss.loading__modal}>\n      <Hearts\n        height=\"100\"\n        width=\"100\"\n        color=\"#F59256\"\n        ariaLabel=\"hearts-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"login-page_container__j3WZJ\",\"login__container\":\"login-page_login__container__Ml6R5\",\"login__form__section\":\"login-page_login__form__section__NAlA+\",\"login__tittle\":\"login-page_login__tittle__xKt05\"};","import scss from './login-page.module.scss';\nimport AuthForm from 'components/AuthForm/AuthForm';\nimport { useSelector } from \"react-redux\";\n\nimport { getLoading } from \"redux/selectors\";\nimport { Spinner } from '@chakra-ui/react'\n\nconst VerifyPage = () => {\n\n  const loading = useSelector(getLoading)\n\n  return (\n    <section className={scss.login__container}>\n      <div className={scss.login__form__section}>\n        <h1 className={scss.login__tittle}>Verify</h1>\n        <AuthForm />\n        {loading && <Spinner />}\n      </div>\n    </section>\n  );\n};\n\nexport default VerifyPage;\n","// src/spinner.tsx\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar Spinner = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props);\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const _className = cx(\"chakra-spinner\", className);\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      __css: spinnerStyles,\n      className: _className,\n      ...rest,\n      children: label && /* @__PURE__ */ jsx(chakra.span, { srOnly: true, children: label })\n    }\n  );\n});\nSpinner.displayName = \"Spinner\";\n\nexport {\n  Spinner\n};\n"],"names":["REACT_APP_BASE_URL","process","isActive","useSelector","state","menu","menuActive","dispatch","useDispatch","className","scss","href","onClick","setMenuActive","Svg","id","schemasForStepFirst","Yup","shape","email","required","min","max","password","passwordConfirm","validatePassword","value","error","includes","validateEmail","test","schemasForStepSecond","name","region","matches","number","schemasForLogin","useState","stepOne","setStepOne","page","useLocation","pathname","user","auth","loading","initialValue","handleSubmitForRegister","values","actions","Notify","city","phone","resetForm","operations","Loader","validationSchema","initialValues","onSubmit","autoComplete","type","placeholder","validate","render","msg","timeout","to","data","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","getLoading","AuthForm","spin","keyframes","transform","Spinner","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","label","thickness","speed","emptyColor","rest","_className","cx","spinnerStyles","display","borderColor","borderStyle","borderRadius","borderWidth","borderBottomColor","borderLeftColor","animation","jsx","chakra","__css","children","srOnly","displayName"],"sourceRoot":""}